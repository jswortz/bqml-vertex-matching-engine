import { Injectable, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-google-tag-manager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleTagManagerService {
    /**
     * @param {?=} config
     * @param {?=} googleTagManagerId
     * @param {?=} googleTagManagerAuth
     * @param {?=} googleTagManagerPreview
     */
    constructor(config = { id: null }, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview) {
        this.config = config;
        this.googleTagManagerId = googleTagManagerId;
        this.googleTagManagerAuth = googleTagManagerAuth;
        this.googleTagManagerPreview = googleTagManagerPreview;
        this.isLoaded = false;
        this.browserGlobals = {
            /**
             * @return {?}
             */
            windowRef() {
                return window;
            },
            /**
             * @return {?}
             */
            documentRef() {
                return document;
            },
        };
        if (this.config == null) {
            this.config = { id: null };
        }
        this.config = Object.assign(Object.assign({}, this.config), { id: googleTagManagerId || this.config.id, gtm_auth: googleTagManagerAuth || this.config['gtm_auth'], gtm_preview: googleTagManagerPreview || this.config['gtm_preview'] });
        if (this.config.id == null) {
            throw new Error('Google tag manager ID not provided.');
        }
    }
    /**
     * @return {?}
     */
    getDataLayer() {
        /** @type {?} */
        const window = this.browserGlobals.windowRef();
        window['dataLayer'] = window['dataLayer'] || [];
        return window['dataLayer'];
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    pushOnDataLayer(obj) {
        /** @type {?} */
        const dataLayer = this.getDataLayer();
        dataLayer.push(obj);
    }
    /**
     * @return {?}
     */
    addGtmToDom() {
        if (this.isLoaded) {
            return;
        }
        /** @type {?} */
        const doc = this.browserGlobals.documentRef();
        this.pushOnDataLayer({
            'gtm.start': new Date().getTime(),
            event: 'gtm.js',
        });
        /** @type {?} */
        const gtmScript = doc.createElement('script');
        gtmScript.id = 'GTMscript';
        gtmScript.async = true;
        gtmScript.src = this.applyGtmQueryParams('https://www.googletagmanager.com/gtm.js');
        doc.head.insertBefore(gtmScript, doc.head.firstChild);
        this.isLoaded = true;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    pushTag(item) {
        if (!this.isLoaded) {
            this.addGtmToDom();
        }
        this.pushOnDataLayer(item);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    applyGtmQueryParams(url) {
        if (url.indexOf('?') === -1) {
            url += '?';
        }
        return (url +
            Object.keys(this.config)
                .filter((/**
             * @param {?} k
             * @return {?}
             */
            (k) => this.config[k]))
                .map((/**
             * @param {?} k
             * @return {?}
             */
            (k) => `${k}=${this.config[k]}`))
                .join('&'));
    }
}
GoogleTagManagerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
GoogleTagManagerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerConfig',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerId',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerAuth',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerPreview',] }] }
];
/** @nocollapse */ GoogleTagManagerService.ɵprov = ɵɵdefineInjectable({ factory: function GoogleTagManagerService_Factory() { return new GoogleTagManagerService(ɵɵinject("googleTagManagerConfig", 8), ɵɵinject("googleTagManagerId", 8), ɵɵinject("googleTagManagerAuth", 8), ɵɵinject("googleTagManagerPreview", 8)); }, token: GoogleTagManagerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    GoogleTagManagerService.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    GoogleTagManagerService.prototype.browserGlobals;
    /** @type {?} */
    GoogleTagManagerService.prototype.config;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerId;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerAuth;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerPreview;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-google-tag-manager.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleTagManagerModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: GoogleTagManagerModule,
            providers: [{ provide: 'googleTagManagerConfig', useValue: config }],
        };
    }
}
GoogleTagManagerModule.decorators = [
    { type: NgModule }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/google-tag-manager-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function GoogleTagManagerConfig() { }
if (false) {
    /** @type {?} */
    GoogleTagManagerConfig.prototype.id;
    /** @type {?|undefined} */
    GoogleTagManagerConfig.prototype.gtm_auth;
    /** @type {?|undefined} */
    GoogleTagManagerConfig.prototype.gtm_preview;
    /* Skipping unhandled member: [key: string]: string | null | undefined;*/
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: angular-google-tag-manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { GoogleTagManagerModule, GoogleTagManagerService };
//# sourceMappingURL=angular-google-tag-manager.js.map
