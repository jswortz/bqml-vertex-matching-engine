/**
 * @fileoverview added by tsickle
 * Generated from: lib/angular-google-tag-manager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import * as i0 from "@angular/core";
export class GoogleTagManagerService {
    /**
     * @param {?=} config
     * @param {?=} googleTagManagerId
     * @param {?=} googleTagManagerAuth
     * @param {?=} googleTagManagerPreview
     */
    constructor(config = { id: null }, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview) {
        this.config = config;
        this.googleTagManagerId = googleTagManagerId;
        this.googleTagManagerAuth = googleTagManagerAuth;
        this.googleTagManagerPreview = googleTagManagerPreview;
        this.isLoaded = false;
        this.browserGlobals = {
            /**
             * @return {?}
             */
            windowRef() {
                return window;
            },
            /**
             * @return {?}
             */
            documentRef() {
                return document;
            },
        };
        if (this.config == null) {
            this.config = { id: null };
        }
        this.config = Object.assign(Object.assign({}, this.config), { id: googleTagManagerId || this.config.id, gtm_auth: googleTagManagerAuth || this.config['gtm_auth'], gtm_preview: googleTagManagerPreview || this.config['gtm_preview'] });
        if (this.config.id == null) {
            throw new Error('Google tag manager ID not provided.');
        }
    }
    /**
     * @return {?}
     */
    getDataLayer() {
        /** @type {?} */
        const window = this.browserGlobals.windowRef();
        window['dataLayer'] = window['dataLayer'] || [];
        return window['dataLayer'];
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    pushOnDataLayer(obj) {
        /** @type {?} */
        const dataLayer = this.getDataLayer();
        dataLayer.push(obj);
    }
    /**
     * @return {?}
     */
    addGtmToDom() {
        if (this.isLoaded) {
            return;
        }
        /** @type {?} */
        const doc = this.browserGlobals.documentRef();
        this.pushOnDataLayer({
            'gtm.start': new Date().getTime(),
            event: 'gtm.js',
        });
        /** @type {?} */
        const gtmScript = doc.createElement('script');
        gtmScript.id = 'GTMscript';
        gtmScript.async = true;
        gtmScript.src = this.applyGtmQueryParams('https://www.googletagmanager.com/gtm.js');
        doc.head.insertBefore(gtmScript, doc.head.firstChild);
        this.isLoaded = true;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    pushTag(item) {
        if (!this.isLoaded) {
            this.addGtmToDom();
        }
        this.pushOnDataLayer(item);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    applyGtmQueryParams(url) {
        if (url.indexOf('?') === -1) {
            url += '?';
        }
        return (url +
            Object.keys(this.config)
                .filter((/**
             * @param {?} k
             * @return {?}
             */
            (k) => this.config[k]))
                .map((/**
             * @param {?} k
             * @return {?}
             */
            (k) => `${k}=${this.config[k]}`))
                .join('&'));
    }
}
GoogleTagManagerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
GoogleTagManagerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerConfig',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerId',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerAuth',] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: ['googleTagManagerPreview',] }] }
];
/** @nocollapse */ GoogleTagManagerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleTagManagerService_Factory() { return new GoogleTagManagerService(i0.ɵɵinject("googleTagManagerConfig", 8), i0.ɵɵinject("googleTagManagerId", 8), i0.ɵɵinject("googleTagManagerAuth", 8), i0.ɵɵinject("googleTagManagerPreview", 8)); }, token: GoogleTagManagerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    GoogleTagManagerService.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    GoogleTagManagerService.prototype.browserGlobals;
    /** @type {?} */
    GoogleTagManagerService.prototype.config;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerId;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerAuth;
    /** @type {?} */
    GoogleTagManagerService.prototype.googleTagManagerPreview;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1nb29nbGUtdGFnLW1hbmFnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItZ29vZ2xlLXRhZy1tYW5hZ2VyL3NyYy9saWIvYW5ndWxhci1nb29nbGUtdGFnLW1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNN0QsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7OztJQVlsQyxZQUdTLFNBQWlDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUNILGtCQUEwQixFQUdwRSxvQkFBNEIsRUFHNUIsdUJBQStCO1FBUC9CLFdBQU0sR0FBTixNQUFNLENBQXVDO1FBQ0gsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFRO1FBR3BFLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBUTtRQUc1Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQVE7UUFyQmhDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsbUJBQWMsR0FBRzs7OztZQUN2QixTQUFTO2dCQUNQLE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7Ozs7WUFDRCxXQUFXO2dCQUNULE9BQU8sUUFBUSxDQUFDO1lBQ2xCLENBQUM7U0FDRixDQUFDO1FBY0EsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtZQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDO1NBQzVCO1FBRUQsSUFBSSxDQUFDLE1BQU0sbUNBQ04sSUFBSSxDQUFDLE1BQU0sS0FDZCxFQUFFLEVBQUUsa0JBQWtCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQ3hDLFFBQVEsRUFBRSxvQkFBb0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxF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M0UsdURBRW1DOztJQUNuQywwREFFc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHb29nbGVUYWdNYW5hZ2VyQ29uZmlnIH0gZnJvbSAnLi9nb29nbGUtdGFnLW1hbmFnZXItY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEdvb2dsZVRhZ01hbmFnZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBpc0xvYWRlZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgYnJvd3Nlckdsb2JhbHMgPSB7XG4gICAgd2luZG93UmVmKCk6IGFueSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH0sXG4gICAgZG9jdW1lbnRSZWYoKTogYW55IHtcbiAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdCgnZ29vZ2xlVGFnTWFuYWdlckNvbmZpZycpXG4gICAgcHVibGljIGNvbmZpZzogR29vZ2xlVGFnTWFuYWdlckNvbmZpZyA9IHsgaWQ6IG51bGwgfSxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KCdnb29nbGVUYWdNYW5hZ2VySWQnKSBwdWJsaWMgZ29vZ2xlVGFnTWFuYWdlcklkOiBzdHJpbmcsXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KCdnb29nbGVUYWdNYW5hZ2VyQXV0aCcpXG4gICAgcHVibGljIGdvb2dsZVRhZ01hbmFnZXJBdXRoOiBzdHJpbmcsXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KCdnb29nbGVUYWdNYW5hZ2VyUHJldmlldycpXG4gICAgcHVibGljIGdvb2dsZVRhZ01hbmFnZXJQcmV2aWV3OiBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnID09IG51bGwpIHtcbiAgICAgIHRoaXMuY29uZmlnID0geyBpZDogbnVsbCB9O1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBpZDogZ29vZ2xlVGFnTWFuYWdlcklkIHx8IHRoaXMuY29uZmlnLmlkLFxuICAgICAgZ3RtX2F1dGg6IGdvb2dsZVRhZ01hbmFnZXJBdXRoIHx8IHRoaXMuY29uZmlnWydndG1fYXV0aCddLFxuICAgICAgZ3RtX3ByZXZpZXc6IGdvb2dsZVRhZ01hbmFnZXJQcmV2aWV3IHx8IHRoaXMuY29uZmlnWydndG1fcHJldmlldyddLFxuICAgIH07XG4gICAgaWYgKHRoaXMuY29uZmlnLmlkID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignR29vZ2xlIHRhZyBtYW5hZ2VyIElEIG5vdCBwcm92aWRlZC4nKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0RGF0YUxheWVyKCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IHRoaXMuYnJvd3Nlckdsb2JhbHMud2luZG93UmVmKCk7XG4gICAgd2luZG93WydkYXRhTGF5ZXInXSA9IHdpbmRvd1snZGF0YUxheWVyJ10gfHwgW107XG4gICAgcmV0dXJuIHdpbmRvd1snZGF0YUxheWVyJ107XG4gIH1cblxuICBwcml2YXRlIHB1c2hPbkRhdGFMYXllcihvYmo6IG9iamVjdCkge1xuICAgIGNvbnN0IGRhdGFMYXllciA9IHRoaXMuZ2V0RGF0YUxheWVyKCk7XG4gICAgZGF0YUxheWVyLnB1c2gob2JqKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRHdG1Ub0RvbSgpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb2MgPSB0aGlzLmJyb3dzZXJHbG9iYWxzLmRvY3VtZW50UmVmKCk7XG4gICAgdGhpcy5wdXNoT25EYXRhTGF5ZXIoe1xuICAgICAgJ2d0bS5zdGFydCc6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgZXZlbnQ6ICdndG0uanMnLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZ3RtU2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIGd0bVNjcmlwdC5pZCA9ICdHVE1zY3JpcHQnO1xuICAgIGd0bVNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgZ3RtU2NyaXB0LnNyYyA9IHRoaXMuYXBwbHlHdG1RdWVyeVBhcmFtcyhcbiAgICAgICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanMnXG4gICAgKTtcbiAgICBkb2MuaGVhZC5pbnNlcnRCZWZvcmUoZ3RtU2NyaXB0LCBkb2MuaGVhZC5maXJzdENoaWxkKTtcblxuICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIHB1c2hUYWcoaXRlbTogb2JqZWN0KSB7XG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkKSB7XG4gICAgICB0aGlzLmFkZEd0bVRvRG9tKCk7XG4gICAgfVxuICAgIHRoaXMucHVzaE9uRGF0YUxheWVyKGl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBseUd0bVF1ZXJ5UGFyYW1zKHVybDogc3RyaW5nKSB7XG4gICAgaWYgKHVybC5pbmRleE9mKCc/JykgPT09IC0xKSB7XG4gICAgICB1cmwgKz0gJz8nO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICB1cmwgK1xuICAgICAgT2JqZWN0LmtleXModGhpcy5jb25maWcpXG4gICAgICAgIC5maWx0ZXIoKGspID0+IHRoaXMuY29uZmlnW2tdKVxuICAgICAgICAubWFwKChrKSA9PiBgJHtrfT0ke3RoaXMuY29uZmlnW2tdfWApXG4gICAgICAgIC5qb2luKCcmJylcbiAgICApO1xuICB9XG59XG4iXX0=