(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-google-tag-manager', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-google-tag-manager'] = {}, global.ng.core));
}(this, (function (exports, i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/angular-google-tag-manager.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleTagManagerService = /** @class */ (function () {
        /**
         * @param {?=} config
         * @param {?=} googleTagManagerId
         * @param {?=} googleTagManagerAuth
         * @param {?=} googleTagManagerPreview
         */
        function GoogleTagManagerService(config, googleTagManagerId, googleTagManagerAuth, googleTagManagerPreview) {
            if (config === void 0) { config = { id: null }; }
            this.config = config;
            this.googleTagManagerId = googleTagManagerId;
            this.googleTagManagerAuth = googleTagManagerAuth;
            this.googleTagManagerPreview = googleTagManagerPreview;
            this.isLoaded = false;
            this.browserGlobals = {
                /**
                 * @return {?}
                 */
                windowRef: function () {
                    return window;
                },
                /**
                 * @return {?}
                 */
                documentRef: function () {
                    return document;
                },
            };
            if (this.config == null) {
                this.config = { id: null };
            }
            this.config = Object.assign(Object.assign({}, this.config), { id: googleTagManagerId || this.config.id, gtm_auth: googleTagManagerAuth || this.config['gtm_auth'], gtm_preview: googleTagManagerPreview || this.config['gtm_preview'] });
            if (this.config.id == null) {
                throw new Error('Google tag manager ID not provided.');
            }
        }
        /**
         * @return {?}
         */
        GoogleTagManagerService.prototype.getDataLayer = function () {
            /** @type {?} */
            var window = this.browserGlobals.windowRef();
            window['dataLayer'] = window['dataLayer'] || [];
            return window['dataLayer'];
        };
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        GoogleTagManagerService.prototype.pushOnDataLayer = function (obj) {
            /** @type {?} */
            var dataLayer = this.getDataLayer();
            dataLayer.push(obj);
        };
        /**
         * @return {?}
         */
        GoogleTagManagerService.prototype.addGtmToDom = function () {
            if (this.isLoaded) {
                return;
            }
            /** @type {?} */
            var doc = this.browserGlobals.documentRef();
            this.pushOnDataLayer({
                'gtm.start': new Date().getTime(),
                event: 'gtm.js',
            });
            /** @type {?} */
            var gtmScript = doc.createElement('script');
            gtmScript.id = 'GTMscript';
            gtmScript.async = true;
            gtmScript.src = this.applyGtmQueryParams('https://www.googletagmanager.com/gtm.js');
            doc.head.insertBefore(gtmScript, doc.head.firstChild);
            this.isLoaded = true;
        };
        /**
         * @param {?} item
         * @return {?}
         */
        GoogleTagManagerService.prototype.pushTag = function (item) {
            if (!this.isLoaded) {
                this.addGtmToDom();
            }
            this.pushOnDataLayer(item);
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        GoogleTagManagerService.prototype.applyGtmQueryParams = function (url) {
            var _this = this;
            if (url.indexOf('?') === -1) {
                url += '?';
            }
            return (url +
                Object.keys(this.config)
                    .filter(( /**
             * @param {?} k
             * @return {?}
             */function (k) { return _this.config[k]; }))
                    .map(( /**
             * @param {?} k
             * @return {?}
             */function (k) { return k + "=" + _this.config[k]; }))
                    .join('&'));
        };
        return GoogleTagManagerService;
    }());
    GoogleTagManagerService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    GoogleTagManagerService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: ['googleTagManagerConfig',] }] },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: ['googleTagManagerId',] }] },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: ['googleTagManagerAuth',] }] },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: ['googleTagManagerPreview',] }] }
    ]; };
    /** @nocollapse */ GoogleTagManagerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleTagManagerService_Factory() { return new GoogleTagManagerService(i0.ɵɵinject("googleTagManagerConfig", 8), i0.ɵɵinject("googleTagManagerId", 8), i0.ɵɵinject("googleTagManagerAuth", 8), i0.ɵɵinject("googleTagManagerPreview", 8)); }, token: GoogleTagManagerService, providedIn: "root" });
    if (false) {
        /**
         * @type {?}
         * @private
         */
        GoogleTagManagerService.prototype.isLoaded;
        /**
         * @type {?}
         * @private
         */
        GoogleTagManagerService.prototype.browserGlobals;
        /** @type {?} */
        GoogleTagManagerService.prototype.config;
        /** @type {?} */
        GoogleTagManagerService.prototype.googleTagManagerId;
        /** @type {?} */
        GoogleTagManagerService.prototype.googleTagManagerAuth;
        /** @type {?} */
        GoogleTagManagerService.prototype.googleTagManagerPreview;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/angular-google-tag-manager.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleTagManagerModule = /** @class */ (function () {
        function GoogleTagManagerModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        GoogleTagManagerModule.forRoot = function (config) {
            return {
                ngModule: GoogleTagManagerModule,
                providers: [{ provide: 'googleTagManagerConfig', useValue: config }],
            };
        };
        return GoogleTagManagerModule;
    }());
    GoogleTagManagerModule.decorators = [
        { type: i0.NgModule }
    ];

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: angular-google-tag-manager.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.GoogleTagManagerModule = GoogleTagManagerModule;
    exports.GoogleTagManagerService = GoogleTagManagerService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-google-tag-manager.umd.js.map
