{"version":3,"sources":["../../../projects/angular-google-tag-manager/src/lib/angular-google-tag-manager.service.ts","../../../projects/angular-google-tag-manager/src/lib/angular-google-tag-manager.module.ts"],"names":["GoogleTagManagerService","config","googleTagManagerId","googleTagManagerAuth","googleTagManagerPreview","id","this","isLoaded","browserGlobals","windowRef","window","documentRef","document","Object","assign","gtm_auth","gtm_preview","Error","prototype","getDataLayer","pushOnDataLayer","obj","push","addGtmToDom","doc","gtm.start","Date","getTime","event","gtmScript","createElement","async","src","applyGtmQueryParams","head","insertBefore","firstChild","pushTag","item","url","_this","indexOf","keys","filter","k","map","join","Injectable","args","providedIn","Optional","type","Inject","GoogleTagManagerModule","forRoot","ngModule","providers","provide","useValue","NgModule"],"mappings":"wWAkBE,SAAAA,EAGSC,EAC0CC,EAG1CC,EAGAC,GAYP,QAnBO,IAAAH,IAAAA,EAAA,CAAmCI,GAAI,OAAvCC,KAAAL,OAAAA,EAC0CK,KAAAJ,mBAAAA,EAG1CI,KAAAH,qBAAAA,EAGAG,KAAAF,wBAAAA,EArBDE,KAAAC,UAAW,EAEXD,KAAAE,eAAiB,CACvBC,UAAS,WACP,OAAOC,QAETC,YAAW,WACT,OAAOC,WAgBU,MAAfN,KAAKL,SACPK,KAAKL,OAAS,CAAEI,GAAI,OAGtBC,KAAKL,OAAMY,OAAAC,OAAAD,OAAAC,OAAA,GACNR,KAAKL,QAAM,CACdI,GAAIH,GAAsBI,KAAKL,OAAOI,GACtCU,SAAUZ,GAAwBG,KAAKL,OAAiB,SACxDe,YAAaZ,GAA2BE,KAAKL,OAAoB,cAE7C,MAAlBK,KAAKL,OAAOI,GACd,MAAM,IAAIY,MAAM,8CAIbjB,EAAAkB,UAAAC,aAAA,eACCT,EAASJ,KAAKE,eAAeC,YAEnC,OADAC,EAAkB,UAAIA,EAAkB,WAAK,GACtCA,EAAkB,WAGnBV,EAAAkB,UAAAE,gBAAA,SAAgBC,GACJf,KAAKa,eACbG,KAAKD,IAGVrB,EAAAkB,UAAAK,YAAA,WACL,IAAIjB,KAAKC,SAAT,KAGMiB,EAAMlB,KAAKE,eAAeG,cAChCL,KAAKc,gBAAgB,CACnBK,aAAa,IAAIC,MAAOC,UACxBC,MAAO,eAGHC,EAAYL,EAAIM,cAAc,UACpCD,EAAUxB,GAAK,YACfwB,EAAUE,OAAQ,EAClBF,EAAUG,IAAM1B,KAAK2B,oBACnB,2CAEFT,EAAIU,KAAKC,aAAaN,EAAWL,EAAIU,KAAKE,YAE1C9B,KAAKC,UAAW,IAGXP,EAAAkB,UAAAmB,QAAA,SAAQC,GACRhC,KAAKC,UACRD,KAAKiB,cAEPjB,KAAKc,gBAAgBkB,IAGftC,EAAAkB,UAAAe,oBAAA,SAAoBM,GAApB,IAAAC,EAAAlC,KAKN,OAJ0B,IAAtBiC,EAAIE,QAAQ,OACdF,GAAO,KAIPA,EACA1B,OAAO6B,KAAKpC,KAAKL,QACd0C,QAAM,SAAEC,GAAM,OAAAJ,EAAKvC,OAAO2C,MAC1BC,KAAG,SAAED,GAAM,OAAGA,EAAC,IAAIJ,EAAKvC,OAAO2C,MAC/BE,KAAK,+BA3FbC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EAeTC,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMJ,KAAA,CAAC,4DAEPE,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMJ,KAAA,CAAC,wDACnBE,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMJ,KAAA,CAAC,0DAEPE,EAAAA,UAAQ,CAAAC,KACRC,EAAAA,OAAMJ,KAAA,CAAC,oSCvBZ,SAAAK,YACgBA,EAAAC,QAAP,SACLrD,GAEA,MAAO,CACLsD,SAAUF,EACVG,UAAW,CAAC,CAAEC,QAAS,yBAA0BC,SAAUzD,+BAPhE0D,EAAAA","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { GoogleTagManagerConfig } from './google-tag-manager-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleTagManagerService {\n  private isLoaded = false;\n\n  private browserGlobals = {\n    windowRef(): any {\n      return window;\n    },\n    documentRef(): any {\n      return document;\n    },\n  };\n\n  constructor(\n    @Optional()\n    @Inject('googleTagManagerConfig')\n    public config: GoogleTagManagerConfig = { id: null },\n    @Optional() @Inject('googleTagManagerId') public googleTagManagerId: string,\n    @Optional()\n    @Inject('googleTagManagerAuth')\n    public googleTagManagerAuth: string,\n    @Optional()\n    @Inject('googleTagManagerPreview')\n    public googleTagManagerPreview: string\n  ) {\n    if (this.config == null) {\n      this.config = { id: null };\n    }\n\n    this.config = {\n      ...this.config,\n      id: googleTagManagerId || this.config.id,\n      gtm_auth: googleTagManagerAuth || this.config['gtm_auth'],\n      gtm_preview: googleTagManagerPreview || this.config['gtm_preview'],\n    };\n    if (this.config.id == null) {\n      throw new Error('Google tag manager ID not provided.');\n    }\n  }\n\n  public getDataLayer() {\n    const window = this.browserGlobals.windowRef();\n    window['dataLayer'] = window['dataLayer'] || [];\n    return window['dataLayer'];\n  }\n\n  private pushOnDataLayer(obj: object) {\n    const dataLayer = this.getDataLayer();\n    dataLayer.push(obj);\n  }\n\n  public addGtmToDom() {\n    if (this.isLoaded) {\n      return;\n    }\n    const doc = this.browserGlobals.documentRef();\n    this.pushOnDataLayer({\n      'gtm.start': new Date().getTime(),\n      event: 'gtm.js',\n    });\n\n    const gtmScript = doc.createElement('script');\n    gtmScript.id = 'GTMscript';\n    gtmScript.async = true;\n    gtmScript.src = this.applyGtmQueryParams(\n      'https://www.googletagmanager.com/gtm.js'\n    );\n    doc.head.insertBefore(gtmScript, doc.head.firstChild);\n\n    this.isLoaded = true;\n  }\n\n  public pushTag(item: object) {\n    if (!this.isLoaded) {\n      this.addGtmToDom();\n    }\n    this.pushOnDataLayer(item);\n  }\n\n  private applyGtmQueryParams(url: string) {\n    if (url.indexOf('?') === -1) {\n      url += '?';\n    }\n\n    return (\n      url +\n      Object.keys(this.config)\n        .filter((k) => this.config[k])\n        .map((k) => `${k}=${this.config[k]}`)\n        .join('&')\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { GoogleTagManagerConfig } from './google-tag-manager-config';\n\n@NgModule()\nexport class GoogleTagManagerModule {\n  public static forRoot(\n    config: GoogleTagManagerConfig\n  ): ModuleWithProviders<GoogleTagManagerModule> {\n    return {\n      ngModule: GoogleTagManagerModule,\n      providers: [{ provide: 'googleTagManagerConfig', useValue: config }],\n    };\n  }\n}\n"]}